import node
import fileinput

def readLines():
	for line in fileinput.input():
		return line

def readColumns(columnstring, column_list, table):
	columnsplit = columnstring.split("\t")
	columnsplit.pop(0)
	for column_name in columnsplit:
		column_list.append(column_name)
		table[column_name] = {}

def readRow(rowstring, column_list, table):
	rowsplit = rowstring.split("\t")
	patient_name = rowsplit.pop(0)
	for i in range(0, len(rowsplit)):
		table[column_list[i]][patient_name] = rowsplit[i]

def createTable():
	table = {}
	filestring = readLines()
	filesplit = filestring.split("\r")
	column_list = []
	columnstring = filesplit.pop(0)
	readColumns(columnstring, column_list, table)
	for rowstring in filesplit:
		readRow(rowstring, column_list, table)
	return table

data = createTable()
tree = {'BCL2L1': {'-0.32697819': 'COMPLETE_REMISSION', '-0.633771757': 'COMPLETE_REMISSION', '0.157858109': 'COMPLETE_REMISSION', '1.607863467': 'COMPLETE_REMISSION', '0.260537369': 'RESISTANT', '-0.390016584': 'COMPLETE_REMISSION', '0.637522447': 'COMPLETE_REMISSION', '-0.042583687': 'COMPLETE_REMISSION', '-1.540766028': 'COMPLETE_REMISSION', '-0.887365763': 'RESISTANT', '-0.870911131': 'RESISTANT', '-0.340156465': 'COMPLETE_REMISSION', '-0.692771913': 'RESISTANT', '-0.167671325': 'COMPLETE_REMISSION', '-0.414993729': 'COMPLETE_REMISSION', '0.310843947': 'RESISTANT', '1.265484879': 'COMPLETE_REMISSION', '-0.526435627': 'COMPLETE_REMISSION', '-0.221254598': 'COMPLETE_REMISSION', '-0.329534337': 'COMPLETE_REMISSION', '0.155371202': 'COMPLETE_REMISSION', '0.630680375': 'COMPLETE_REMISSION', '-0.664405431': 'RESISTANT', '-0.571090132': 'RESISTANT', '-0.078017698': 'COMPLETE_REMISSION', '-0.442997894': 'COMPLETE_REMISSION', '0.680570765': 'COMPLETE_REMISSION', '0.173133805': 'COMPLETE_REMISSION', '-1.106889418': 'RESISTANT', '0.812467765': 'RESISTANT', '-1.143996727': 'COMPLETE_REMISSION', '0.327252928': 'COMPLETE_REMISSION', '-0.496686183': 'RESISTANT', '0.446374895': 'COMPLETE_REMISSION', '0.094279008': 'COMPLETE_REMISSION', '-0.629473111': 'COMPLETE_REMISSION', '-0.105071067': 'COMPLETE_REMISSION', '-0.615273441': 'RESISTANT', '0.622514978': 'COMPLETE_REMISSION', '0.001735651': 'RESISTANT', '0.773591502': 'RESISTANT', '-0.074071827': 'COMPLETE_REMISSION', '-0.231998084': 'RESISTANT', '0.321794623': 'RESISTANT', '1.39864164': 'COMPLETE_REMISSION', '-1.316032039': 'RESISTANT', '-0.355420909': 'COMPLETE_REMISSION', '-1.139626913': 'RESISTANT', '1.12548264': 'RESISTANT', '-0.004952722': 'COMPLETE_REMISSION', '0.850300409': 'COMPLETE_REMISSION', '-0.929285918': 'COMPLETE_REMISSION', '-0.906314649': 'COMPLETE_REMISSION', '-0.411378278': 'RESISTANT', '0.74631922': 'COMPLETE_REMISSION', '3.32711081': 'COMPLETE_REMISSION', '0.311879574': 'COMPLETE_REMISSION', '-0.58281289': 'COMPLETE_REMISSION', '-0.222428518': 'COMPLETE_REMISSION', '-0.402019107': 'RESISTANT', '-0.308819534': 'COMPLETE_REMISSION', '-0.70763826': 'RESISTANT', '-0.606836961': 'COMPLETE_REMISSION', '0.593301621': 'RESISTANT', '-0.215684645': 'COMPLETE_REMISSION', '0.070256516': 'COMPLETE_REMISSION', '-0.613753136': 'RESISTANT', '0.804297257': 'RESISTANT', '-0.969539406': 'RESISTANT', '1.343568653': 'COMPLETE_REMISSION', '-0.085948758': 'COMPLETE_REMISSION', '-0.885482366': 'COMPLETE_REMISSION', '-0.026598191': 'COMPLETE_REMISSION', '-0.520714807': 'RESISTANT', '-0.903070599': 'COMPLETE_REMISSION', '-0.329696767': 'RESISTANT', '-0.439029729': 'RESISTANT', '-1.390926287': 'COMPLETE_REMISSION', '0.811228602': 'COMPLETE_REMISSION', '1.445813891': 'COMPLETE_REMISSION', '-0.873863909': 'RESISTANT', '0.386077109': 'COMPLETE_REMISSION', '0.916382221': 'COMPLETE_REMISSION', '0.074718786': 'RESISTANT', '0.635803171': 'COMPLETE_REMISSION', '-0.008051097': 'RESISTANT', '1.083271827': 'COMPLETE_REMISSION', '-0.703473312': 'COMPLETE_REMISSION', '-0.480919183': 'RESISTANT', '1.231749905': 'COMPLETE_REMISSION', '-0.635984798': 'COMPLETE_REMISSION', '0.481187217': 'RESISTANT', '-1.426902875': 'COMPLETE_REMISSION', '0.452335376': 'COMPLETE_REMISSION', '1.331350585': 'COMPLETE_REMISSION', '-0.663313044': 'COMPLETE_REMISSION', '0.418280592': 'COMPLETE_REMISSION', '-0.441622022': 'COMPLETE_REMISSION', '-0.784500841': 'COMPLETE_REMISSION', '0.052678602': 'COMPLETE_REMISSION', '-0.168482378': 'RESISTANT', '-1.249510463': 'COMPLETE_REMISSION', '0.818450785': 'RESISTANT', '-0.373737053': 'COMPLETE_REMISSION', '0.61224943': 'COMPLETE_REMISSION', '1.556191302': 'COMPLETE_REMISSION', '-0.600524606': 'COMPLETE_REMISSION', '2.57614838': 'COMPLETE_REMISSION', '-1.567410466': 'COMPLETE_REMISSION', '-0.617602225': 'COMPLETE_REMISSION', '2.514025668': 'COMPLETE_REMISSION', '-0.135522697': 'COMPLETE_REMISSION', '2.376888307': 'COMPLETE_REMISSION', '0.316844683': 'RESISTANT', '-0.786945783': 'COMPLETE_REMISSION', '0.412523725': 'RESISTANT', '-1.381608694': 'COMPLETE_REMISSION', '-0.466053363': 'COMPLETE_REMISSION', '-0.046459894': 'COMPLETE_REMISSION', '1.566418606': 'COMPLETE_REMISSION', '-0.686406329': 'COMPLETE_REMISSION', '-1.252926552': 'COMPLETE_REMISSION', '-0.383180655': 'COMPLETE_REMISSION', '0.692967943': 'COMPLETE_REMISSION', '0.032829603': 'COMPLETE_REMISSION', '-0.405949749': 'COMPLETE_REMISSION', '2.884084778': 'RESISTANT', '-0.942315635': 'COMPLETE_REMISSION', '-0.620287794': 'COMPLETE_REMISSION', '-0.074503831': 'COMPLETE_REMISSION', '-0.109693854': 'RESISTANT', '-0.43499016': 'COMPLETE_REMISSION', '-0.62155364': 'COMPLETE_REMISSION', '-0.342605822': 'RESISTANT', '-1.00664841': 'RESISTANT', '-0.409973443': 'RESISTANT', '1.240536724': 'COMPLETE_REMISSION', '-0.101166756': 'RESISTANT', '-0.525014445': 'COMPLETE_REMISSION', '-0.25258369': 'COMPLETE_REMISSION', '0.208207239': 'RESISTANT', '-0.716955556': 'COMPLETE_REMISSION', '-0.857664816': 'COMPLETE_REMISSION', '-0.437315392': 'RESISTANT', '-0.424668827': 'COMPLETE_REMISSION', '-0.828058461': 'RESISTANT', '-0.332441071': 'COMPLETE_REMISSION', '-1.111852322': 'COMPLETE_REMISSION', '-1.136737583': 'COMPLETE_REMISSION', '0.332837445': 'COMPLETE_REMISSION', '0.406039505': 'COMPLETE_REMISSION', '-0.269586672': 'COMPLETE_REMISSION', '-0.447675636': 'RESISTANT', '0.989121405': 'RESISTANT', '-0.578291676': 'COMPLETE_REMISSION', '-1.192983019': 'COMPLETE_REMISSION', '-1.280457488': 'COMPLETE_REMISSION', '0.061769009': 'COMPLETE_REMISSION', '-0.391971111': 'COMPLETE_REMISSION', '-0.754454082': 'RESISTANT', '0.153508109': 'COMPLETE_REMISSION', '-0.524392464': 'RESISTANT', '0.426410125': 'RESISTANT', '0.824313247': 'COMPLETE_REMISSION', '-1.098984091': 'COMPLETE_REMISSION', '-0.021200302': 'COMPLETE_REMISSION'}}
count = 0
for key, entry in data.iteritems().next()[1].items():
	count += 1
	tempDict = tree.copy()
	result = ""
	while(isinstance(tempDict, dict)):
		root = node.node(tempDict.keys()[0], tempDict[tempDict.keys()[0]])
		tempDict = tempDict[tempDict.keys()[0]]
		value = data[root.value][key]
		if(value in tempDict.keys()):
			child = node.node(value, tempDict[value])
			result = tempDict[value]
			tempDict = tempDict[value]
		else:
			print "can't process input %s" % count
			result = "?"
			break
	print ("entry%s = %s" % (count, result))
